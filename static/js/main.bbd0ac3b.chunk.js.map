{"version":3,"sources":["ConversorCtoF.jsx","ConversorFtoC.jsx","ConversorCtoK.jsx","ConversorKtoC.jsx","HomePage.jsx","App.js","serviceWorker.js","index.js"],"names":["ConversorCtoF","props","convertNumber","value","parseFloat","match","join","change","e","target","res","setState","celsius","fahrenheit","toFixed","state","className","id","type","this","onChange","readOnly","React","Component","ConversorFtoC","ConversorCtoK","kelvin","ConversorKtoC","HomePage","console","log","moedas","from","resFrom","to","high","result","Intl","NumberFormat","maximumSignificantDigits","format","axios","get","then","data","htmlFor","name","Object","values","map","moeda","index","key","code","href","App","history","createBrowserHistory","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bbd0ac3b.chunk.js","sourcesContent":["import React from \"react\";\n\nclass ConversorCtoF extends React.Component {\n    constructor(props) {\n        super(props);\n        debugger;\n        this.state = {\n            celsius: 0,\n            fahrenheit: 32\n        };\n    }\n\n    convertNumber = value => {\n        return parseFloat(value.match( /\\d+/g ).join(''));\n    };\n\n    change = e => {\n        if (e.target) {\n            const value = e.target.value;\n            const res = (value * 9/5) + 32;\n            this.setState({celsius: value, fahrenheit: res.toFixed(2)});\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"conversor\">\n                    <div>\n                        <label>Celsius (C°)</label>\n                        <input id=\"celsius\" type=\"number\" value={this.state.celsius} onChange={this.change}/>\n                    </div>\n                    <p className=\"equals\">=</p>\n                    <div>\n                        <label>Fahrenheit (°F)</label>\n                        <input id=\"fahrenheit\" type=\"number\" value={this.state.fahrenheit} readOnly/>\n                    </div>\n                </div>\n                <div>\n                    <p className=\"formula\">Fórmula</p>\n                    <p>({this.state.celsius || 0} °C × 9/5) + 32 = {this.state.fahrenheit} °F</p>\n                </div>\n\n                <div className=\"details\">\n                    <h1>Detalhes</h1>\n                    <p className=\"topic\">Celsius</p>\n                    <article>\n                        Embora inicialmente definido como ponto de congelação da água (e depois como ponto de fusão do gelo), a escala Celsius é agora oficialmente uma escala derivada, definida em relação à escala de temperatura Kelvin.\n                        <br/><br/>O zero na escala Celsius (0 °C) é agora definido como equivalente a 273,15 K, com uma diferença de temperatura de 1 °C equivalente a uma diferença de 1 K, ou seja, o tamanho da unidade em cada escala é a mesma. Isto significa que 100 °C, previamente definido como o ponto de ebulição da água, é agora definido como equivalente a 373,15 K.\n                        <br/><br/>A escala Celsius é um sistema de intervalo, mas não um sistema de relação, ou seja, segue uma escala relativa, mas não uma escala absoluta. Isto pode ser observado porque o intervalo de temperatura entre 20 °C e 30 °C é o mesmo que entre 30 °C e 40 °C, mas 40 °C não tem o dobro da energia térmica de um ar de 20 ° C.\n                        <br/><br/>A diferença de temperatura de 1 °C é equivalente a uma difer\n                    </article>\n\n                    <p className=\"topic\">Fahrenheit</p>\n                    <article>\n                        O Fahrenheit é uma escala de temperatura termodinâmica, onde o ponto de congelamento da água é de 32 graus Fahrenheit (°F) e o ponto de ebulição de 212 °F (com uma pressão atmosférica normal). Isso coloca os pontos de ebulição e de congelamento da água exatamente a 180 graus de separação. Por conseguinte, um grau na escala Fahrenheit é de 1/180 de intervalo entre o ponto de congelação e o ponto de ebulição da água. O zero absoluto é definido como igual a -459,67 °F.\n                        <br/><br/>A diferença de temperatura de 1 °F é o equivalente a uma diferença de temperatura de 0,556 °C.\n                    </article>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ConversorCtoF;","import React from \"react\";\n\nclass ConversorFtoC extends React.Component {\n    constructor(props) {\n        super(props);\n        debugger;\n        this.state = {\n            celsius: 0,\n            fahrenheit: 32\n        };\n    }\n\n    convertNumber = value => {\n        return parseFloat(value.match( /\\d+/g ).join(''));\n    };\n\n    change = e => {\n        if (e.target) {\n            const value = e.target.value;\n            const res = (value - 32) * (5/9);\n            this.setState({fahrenheit: value, celsius: res.toFixed(2)});\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"conversor\">\n                    <div>\n                        <label>Fahrenheit (°F)</label>\n                        <input id=\"fahrenheit\" type=\"number\" value={this.state.fahrenheit} onChange={this.change}/>\n                    </div>\n                    <p className=\"equals\">=</p>\n                    <div>\n                        <label>Celsius (C°)</label>\n                        <input id=\"celsius\" type=\"number\" value={this.state.celsius} readOnly/>\n                    </div>\n                </div>\n                <div>\n                    <p className=\"formula\">Fórmula</p>\n                    <p>({this.state.fahrenheit} °F − 32) × 5/9 = {this.state.celsius} °C</p>\n                </div>\n\n                <div className=\"details\">\n                    <h1>Detalhes</h1>\n                    <p className=\"topic\">Celsius</p>\n                    <article>\n                        Embora inicialmente definido como ponto de congelação da água (e depois como ponto de fusão do gelo), a escala Celsius é agora oficialmente uma escala derivada, definida em relação à escala de temperatura Kelvin.\n                        <br/><br/>O zero na escala Celsius (0 °C) é agora definido como equivalente a 273,15 K, com uma diferença de temperatura de 1 °C equivalente a uma diferença de 1 K, ou seja, o tamanho da unidade em cada escala é a mesma. Isto significa que 100 °C, previamente definido como o ponto de ebulição da água, é agora definido como equivalente a 373,15 K.\n                        <br/><br/>A escala Celsius é um sistema de intervalo, mas não um sistema de relação, ou seja, segue uma escala relativa, mas não uma escala absoluta. Isto pode ser observado porque o intervalo de temperatura entre 20 °C e 30 °C é o mesmo que entre 30 °C e 40 °C, mas 40 °C não tem o dobro da energia térmica de um ar de 20 ° C.\n                        <br/><br/>A diferença de temperatura de 1 °C é equivalente a uma difer\n                    </article>\n\n                    <p className=\"topic\">Fahrenheit</p>\n                    <article>\n                        O Fahrenheit é uma escala de temperatura termodinâmica, onde o ponto de congelamento da água é de 32 graus Fahrenheit (°F) e o ponto de ebulição de 212 °F (com uma pressão atmosférica normal). Isso coloca os pontos de ebulição e de congelamento da água exatamente a 180 graus de separação. Por conseguinte, um grau na escala Fahrenheit é de 1/180 de intervalo entre o ponto de congelação e o ponto de ebulição da água. O zero absoluto é definido como igual a -459,67 °F.\n                        <br/><br/>A diferença de temperatura de 1 °F é o equivalente a uma diferença de temperatura de 0,556 °C.\n                    </article>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ConversorFtoC;","import React from \"react\";\n\nclass ConversorCtoK extends React.Component {\n    constructor(props) {\n        super(props);\n        debugger;\n        this.state = {\n            kelvin: 273.15,\n            celsius: 0\n        };\n    }\n\n    convertNumber = value => {\n        return parseFloat(value.match( /\\d+/g ).join(''));\n    };\n\n    change = e => {\n        if (e.target) {\n            const value = this.convertNumber(e.target.value);\n            const res = value + 273.15;\n            this.setState({celsius: value, kelvin: res.toFixed(2)});\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"conversor\">\n                    <div>\n                        <label>Celsius (C°)</label>\n                        <input id=\"celsius\" type=\"number\" value={this.state.celsius} onChange={this.change}/>\n                    </div>\n                    <p className=\"equals\">=</p>\n                    <div>\n                        <label>Kelvin (K)</label>\n                        <input id=\"kelvin\" type=\"number\" value={this.state.kelvin} readOnly/>\n                    </div>\n                </div>\n                <div>\n                    <p className=\"formula\">Fórmula</p>\n                    <p>{this.state.celsius} °C + 273,15 = {this.state.kelvin} K</p>\n                </div>\n\n                <div className=\"details\">\n                    <h1>Detalhes</h1>\n                    \n                    <p className=\"topic\">Calor e Temperatura</p>\n                    <article>\n                        O Calor é a energia transferida de um corpo para o outro quando existe diferença de temperatura. \n                        <br/>Já temperatura é a medida de agitação das moléculas.  \n                        <br/>Por exemplo: ao colocarmos gelo no suco, as moléculas do suco estão mais agitadas do que as do gelo. \n                        <br/>Por isso dizemos que a temperatura do suco é maior que a do gelo ou que o suco é mais quente que o gelo. \n                        <br/>Quando colocamos eles em contato ocorre transferência de energia. \n                        <br/>Consequentemente, o gelo esquenta e o suco esfria.\n                    </article>\n                    \n                    <p className=\"topic\">Celsius</p>\n                    <article>\n                        Embora inicialmente definido como ponto de congelação da água (e depois como ponto de fusão do gelo), a escala Celsius é agora oficialmente uma escala derivada, definida em relação à escala de temperatura Kelvin.\n                        <br/><br/>O zero na escala Celsius (0 °C) é agora definido como equivalente a 273,15 K, com uma diferença de temperatura de 1 °C equivalente a uma diferença de 1 K, ou seja, o tamanho da unidade em cada escala é a mesma. Isto significa que 100 °C, previamente definido como o ponto de ebulição da água, é agora definido como equivalente a 373,15 K.\n                        <br/><br/>A escala Celsius é um sistema de intervalo, mas não um sistema de relação, ou seja, segue uma escala relativa, mas não uma escala absoluta. Isto pode ser observado porque o intervalo de temperatura entre 20 °C e 30 °C é o mesmo que entre 30 °C e 40 °C, mas 40 °C não tem o dobro da energia térmica de um ar de 20 ° C.\n                        <br/><br/>A diferença de temperatura de 1 °C é equivalente a uma difer\n                    </article>\n\n                    <p className=\"topic\">Kelvin</p>\n                    <article>\n                        <br/><br/>William Tomson (conhecido como Lord Kelvin) estudando o comportamento do gases, descobriu a menor temperatura que um corpo poderia atingir, que seria equivalente a -273°C. \n                        <br/><br/>A partir daí determinou o ponto zero de sua escala. Criou assim o que chamamos de escala absoluta, pois utiliza um fenômeno universal como referência. \n                        <br/><br/>Nela a água congela em 273 Kelvin (K) e ferve a 373 K - repare que não utilizamos graus, pois esta é a escala absoluta e não uma comparação entre fenômenos como as outras escalas.\n                    </article>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ConversorCtoK;","import React from \"react\";\n\nclass ConversorKtoC extends React.Component {\n    constructor(props) {\n        super(props);\n        debugger;\n        this.state = {\n            celsius: -273.5,\n            kelvin: 0\n        };\n    }\n\n    convertNumber = value => {\n        return parseFloat(value.match( /\\d+/g ).join(''));\n    };\n\n    change = e => {\n        if (e.target) {\n            const value = this.convertNumber(e.target.value);\n            debugger;\n            const res = value - 273.15;\n            this.setState({kelvin: value, celsius: res.toFixed(2)});\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"conversor\">\n                    <div>\n                        <label>Kelvin (K)</label>\n                        <input id=\"kelvin\" type=\"number\" value={this.state.kelvin} onChange={this.change}/>\n                    </div>\n                    <p className=\"equals\">=</p>\n                    <div>\n                        <label>Celsius (C°)</label>\n                        <input id=\"celsius\" type=\"number\" value={this.state.celsius} readOnly/>\n                    </div>\n                </div>\n                <div>\n                    <p className=\"formula\">Fórmula</p>\n                    <p>{this.state.kelvin} K − 273,15 = {this.state.celsius} °C</p>\n                </div>\n\n                <div className=\"details\">\n                    <h1>Detalhes</h1>\n                    <p className=\"topic\">Celsius</p>\n                    <article>\n                        Embora inicialmente definido como ponto de congelação da água (e depois como ponto de fusão do gelo), a escala Celsius é agora oficialmente uma escala derivada, definida em relação à escala de temperatura Kelvin.\n                        <br/><br/>O zero na escala Celsius (0 °C) é agora definido como equivalente a 273,15 K, com uma diferença de temperatura de 1 °C equivalente a uma diferença de 1 K, ou seja, o tamanho da unidade em cada escala é a mesma. Isto significa que 100 °C, previamente definido como o ponto de ebulição da água, é agora definido como equivalente a 373,15 K.\n                        <br/><br/>A escala Celsius é um sistema de intervalo, mas não um sistema de relação, ou seja, segue uma escala relativa, mas não uma escala absoluta. Isto pode ser observado porque o intervalo de temperatura entre 20 °C e 30 °C é o mesmo que entre 30 °C e 40 °C, mas 40 °C não tem o dobro da energia térmica de um ar de 20 ° C.\n                        <br/><br/>A diferença de temperatura de 1 °C é equivalente a uma difer\n                    </article>\n\n                    <p className=\"topic\">Fahrenheit</p>\n                    <article>\n                        O Fahrenheit é uma escala de temperatura termodinâmica, onde o ponto de congelamento da água é de 32 graus Fahrenheit (°F) e o ponto de ebulição de 212 °F (com uma pressão atmosférica normal). Isso coloca os pontos de ebulição e de congelamento da água exatamente a 180 graus de separação. Por conseguinte, um grau na escala Fahrenheit é de 1/180 de intervalo entre o ponto de congelação e o ponto de ebulição da água. O zero absoluto é definido como igual a -459,67 °F.\n                        <br/><br/>A diferença de temperatura de 1 °F é o equivalente a uma diferença de temperatura de 0,556 °C.\n                    </article>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ConversorKtoC;","import React from \"react\";\nimport axios from \"axios\";\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 0,\n            moedas: [],\n            from: \"USD\",\n            to: \"BRL\",\n            result: 0\n        };\n    }\n\n    componentDidMount() {\n        axios.get(\"https://economia.awesomeapi.com.br/json/all\").then(res => {\n            this.setState({moedas: res.data});\n        });\n    }\n\n    change = e => {\n        this.setState({[e.target.id]: e.target.value}, () => {\n            console.log(this.state);\n            const {moedas, from, to, value} = this.state;\n            const resFrom = value * parseFloat(moedas[from].high);\n            this.setState({result: new Intl.NumberFormat('pt-BR', { maximumSignificantDigits: 3 }).format(resFrom)});\n        });\n    };\n\n    render() {\n        return (\n            <main>\n                <section>\n                    <h1>Conversão Rápida</h1>\n                    <p>Acesse nossos conversores mais populares abaixo para converter rapidamente taxas de moeda, distância, temperatura, área e muito mais. \n                        Para acessar todos os nossos conversores, navegue no menu acima.</p>\n                </section>\n\n                <section className=\"grid\">\n                    <div className=\"card\">\n                        <p className=\"title\">Moeda</p>\n                        <div className=\"column\">\n                            <label htmlFor=\"from\">Quero converter</label>\n                            <input id=\"value\" type=\"text\" value={this.state.value} onChange={this.change}/>\n                            <select id=\"from\" name=\"from\" value={this.state.from} onChange={this.change}>\n                                {Object.values(this.state.moedas).map((moeda, index) => {\n                                    return (\n                                        <option key={index} value={moeda.code}>{moeda.name}({moeda.code})</option>\n                                    );\n                                })}\n                            </select>\n                            {/* <label htmlFor=\"to\">Para</label>\n                            <select id=\"to\" name=\"to\" value={this.state.to} onChange={this.change}>\n                                {Object.values(this.state.moedas).map((moeda, index) => {\n                                    return (\n                                        <option key={index} value={moeda.code}>{moeda.name}({moeda.code})</option>\n                                    );\n                                })}\n                            </select> */}\n                            <p className=\"result\">({this.state.from} - BRL): R$ {this.state.result}</p>\n                        </div>\n                    </div>\n\n                    <div className=\"card\">\n                        <p className=\"title\">Moeda</p>\n                        <div className=\"column\">\n                            <label htmlFor=\"from\">Quero converter</label>\n                            <input id=\"value\" type=\"text\" value={this.state.value} onChange={this.change}/>\n                            <select id=\"from\" name=\"from\" value={this.state.from} onChange={this.change}>\n                                {Object.values(this.state.moedas).map((moeda, index) => {\n                                    return (\n                                        <option key={index} value={moeda.code}>{moeda.name}({moeda.code})</option>\n                                    );\n                                })}\n                            </select>\n                            {/* <label htmlFor=\"to\">Para</label>\n                            <select id=\"to\" name=\"to\" value={this.state.to} onChange={this.change}>\n                                {Object.values(this.state.moedas).map((moeda, index) => {\n                                    return (\n                                        <option key={index} value={moeda.code}>{moeda.name}({moeda.code})</option>\n                                    );\n                                })}\n                            </select> */}\n                            <p className=\"result\">({this.state.from} - BRL): R$ {this.state.result}</p>\n                        </div>\n                    </div>\n\n                    <div className=\"card\">\n                        <p className=\"title\">Moeda</p>\n                        <div className=\"column\">\n                            <label htmlFor=\"from\">Quero converter</label>\n                            <input id=\"value\" type=\"text\" value={this.state.value} onChange={this.change}/>\n                            <select id=\"from\" name=\"from\" value={this.state.from} onChange={this.change}>\n                                {Object.values(this.state.moedas).map((moeda, index) => {\n                                    return (\n                                        <option key={index} value={moeda.code}>{moeda.name}({moeda.code})</option>\n                                    );\n                                })}\n                            </select>\n                            {/* <label htmlFor=\"to\">Para</label>\n                            <select id=\"to\" name=\"to\" value={this.state.to} onChange={this.change}>\n                                {Object.values(this.state.moedas).map((moeda, index) => {\n                                    return (\n                                        <option key={index} value={moeda.code}>{moeda.name}({moeda.code})</option>\n                                    );\n                                })}\n                            </select> */}\n                            <p className=\"result\">({this.state.from} - BRL): R$ {this.state.result}</p>\n                        </div>\n                    </div>\n                </section>\n\n                <section>\n                    <h1>Conversor Online</h1>\n                    <p>\n                        O Conversor Online é um dos serviços de conversão de unidades mais utilizados no mundo. \n                        Você pode descobrir rapidamente quantas libras é um quilo, quantos dólares é um euro, quantos centímetros é um pé, bem como tamanhos de papel, \n                        tamanhos de sapato, área, volume, temperatura e muito mais. \n                        Use nossas calculadoras para moeda, peso, distância e praticamente qualquer unidade de medida no mundo.\n                        As unidades de medida foram uma das primeiras ferramentas desenvolvidas pelos seres humanos e os registros voltam para o 4º para o 3º milênio aC de lugares \n                        como o Egito e o vale do Indo.\n                    </p>\n                </section>\n\n                <footer>\n                    <div>\n                        <ol>\n                            <li>\n                            <a href=\"/conversores-online/#/coverter/celsius-fahrenheit\">Celsius p/ Fahrenheit</a>\n                            </li>\n                            <li>\n                            <a href=\"/conversores-online/#/coverter/fahrenheit-celsius\">Fahrenheit p/ Celsius</a>\n                            </li>\n                            <li>\n                            <a href=\"/conversores-online/#/coverter/kelvin-celsius\">Kelvin p/ Celsius</a>\n                            </li>\n                            <li>\n                            <a href=\"/conversores-online/#/coverter/celsius-kelvin\">Celsius p/ Kelvin</a>\n                            </li>\n                        </ol>\n                    </div>\n                </footer>\n            </main>\n        );\n    }\n}\n\nexport default HomePage;","import React from 'react';\nimport {HashRouter, Switch, Route, Redirect} from \"react-router-dom\";\nimport {createBrowserHistory} from \"history\";\nimport ConversorCtoF from \"./ConversorCtoF\";\nimport ConversorFtoC from \"./ConversorFtoC\";\nimport ConversorCtoK from \"./ConversorCtoK\";\nimport ConversorKtoC from \"./ConversorKtoC\";\nimport HomePage from \"./HomePage\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header></header>\n      <div className=\"content\">\n        <nav>\n          <p className=\"menu-title\">Conversores</p>\n          <ol>\n            <li>\n              <a href=\"/conversores-online/#/coverter/celsius-fahrenheit\">Celsius p/ Fahrenheit</a>\n            </li>\n            <li>\n              <a href=\"/conversores-online/#/coverter/fahrenheit-celsius\">Fahrenheit p/ Celsius</a>\n            </li>\n            <li>\n              <a href=\"/conversores-online/#/coverter/kelvin-celsius\">Kelvin p/ Celsius</a>\n            </li>\n            <li>\n              <a href=\"/conversores-online/#/coverter/celsius-kelvin\">Celsius p/ Kelvin</a>\n            </li>\n          </ol>\n          <p className=\"menu-title\">Cotações</p>\n          <ol>\n            <li>\n              <a href=\"/conversores-online/#/cotacao/dolar-real\">Dólar para Real</a>\n            </li>\n            <li>\n              <a href=\"/conversores-online/#/cotacao/euro-real\">Euro para Real</a>\n            </li>\n            <li>\n              <a href=\"/conversores-online/#/cotacao/libra-real\">Libra para Real</a>\n            </li>\n          </ol>\n        </nav>\n        <main>\n          <HashRouter history={createBrowserHistory()}>\n            <Switch>\n            <Route exact path=\"/\" component={HomePage}/>\n              <Route exact path=\"/coverter/celsius-fahrenheit\" component={ConversorCtoF}/>\n              <Route exact path=\"/coverter/fahrenheit-celsius\" component={ConversorFtoC}/>\n              <Route exact path=\"/coverter/kelvin-celsius\" component={ConversorKtoC}/>\n              <Route exact path=\"/coverter/celsius-kelvin\" component={ConversorCtoK}/>\n            </Switch>\n          </HashRouter>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}